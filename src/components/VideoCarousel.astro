---
interface Props {
    videos: {
        title: string;
        src: string;
    }[];
}

const { videos } = Astro.props;
---

<div class="carousel-container">
    <div class="carousel">
        {videos.map((video, index) => (
            <div class="carousel-item" data-index={index}>
                <video 
                    controls 
                    class="carousel-video"
                    preload="metadata"
                    playsinline
                    crossorigin="anonymous"
                >
                    <source src={video.src} type="video/mp4">
                    Tu navegador no soporta el elemento de video.
                </video>
                <h3>{video.title}</h3>
            </div>
        ))}
    </div>
    <button class="carousel-button prev">❮</button>
    <button class="carousel-button next">❯</button>
    <button class="close-button">×</button>
</div>

<style>
    .carousel-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.9);
        z-index: 1000;
        display: none;
        justify-content: center;
        align-items: center;
    }

    .carousel-container.active {
        display: flex;
    }

    .carousel {
        display: flex;
        transition: transform 0.5s ease-in-out;
        width: 100%;
        height: 100%;
    }

    .carousel-item {
        min-width: 100%;
        height: 100%;
        padding: 2rem;
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .carousel-video {
        width: 100%;
        height: 80vh;
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background: #000;
    }

    .carousel-button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        color: white;
        border: none;
        padding: 1.5rem;
        cursor: pointer;
        font-size: 3rem;
        transition: color 0.3s;
        z-index: 1001;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .carousel-button:hover {
        color: rgba(255, 255, 255, 0.8);
    }

    .prev {
        left: 2rem;
    }

    .next {
        right: 2rem;
    }

    .close-button {
        position: absolute;
        top: 2rem;
        right: 2rem;
        background: none;
        color: white;
        border: none;
        width: 3rem;
        height: 3rem;
        font-size: 3rem;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: color 0.3s;
        z-index: 1001;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .close-button:hover {
        color: rgba(255, 255, 255, 0.8);
    }

    h3 {
        margin-top: 1rem;
        color: white;
        font-size: 1.5rem;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const carousel = document.querySelector('.carousel') as HTMLElement;
        const carouselContainer = document.querySelector('.carousel-container') as HTMLElement;
        const items = document.querySelectorAll('.carousel-item');
        const prevButton = document.querySelector('.prev');
        const nextButton = document.querySelector('.next');
        const closeButton = document.querySelector('.close-button');
        let currentIndex = 0;

        function updateCarousel() {
            if (carousel) {
                carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
                // Pausar todos los videos
                const videos = document.querySelectorAll('video');
                videos.forEach(video => {
                    video.pause();
                });
            }
        }

        function openCarousel() {
            if (carouselContainer) {
                carouselContainer.classList.add('active');
                document.body.style.overflow = 'hidden';
                // Cargar el primer video
                const firstVideo = items[0].querySelector('video');
                if (firstVideo) {
                    firstVideo.load();
                    // Intentar reproducir el video
                    firstVideo.play().catch(error => {
                        console.error('Error al reproducir el video:', error);
                    });
                }
            }
        }

        function closeCarousel() {
            if (carouselContainer) {
                carouselContainer.classList.remove('active');
                document.body.style.overflow = '';
                // Pausar todos los videos
                const videos = document.querySelectorAll('video');
                videos.forEach(video => {
                    video.pause();
                });
            }
        }

        // Exponer la función openCarousel globalmente
        (window as any).openVideoCarousel = openCarousel;

        prevButton?.addEventListener('click', () => {
            currentIndex = Math.max(currentIndex - 1, 0);
            updateCarousel();
            // Cargar el video anterior
            const prevVideo = items[currentIndex].querySelector('video');
            if (prevVideo) {
                prevVideo.load();
                // Intentar reproducir el video
                prevVideo.play().catch(error => {
                    console.error('Error al reproducir el video:', error);
                });
            }
        });

        nextButton?.addEventListener('click', () => {
            currentIndex = Math.min(currentIndex + 1, items.length - 1);
            updateCarousel();
            // Cargar el siguiente video
            const nextVideo = items[currentIndex].querySelector('video');
            if (nextVideo) {
                nextVideo.load();
                // Intentar reproducir el video
                nextVideo.play().catch(error => {
                    console.error('Error al reproducir el video:', error);
                });
            }
        });

        closeButton?.addEventListener('click', closeCarousel);

        // Cerrar con la tecla Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeCarousel();
            }
        });

        // Manejar errores de carga de video
        const videos = document.querySelectorAll('video');
        videos.forEach(video => {
            video.addEventListener('error', (e) => {
                console.error('Error al cargar el video:', e);
                const errorMessage = document.createElement('div');
                errorMessage.textContent = 'Error al cargar el video';
                errorMessage.style.color = 'white';
                errorMessage.style.padding = '1rem';
                video.parentElement?.appendChild(errorMessage);
            });

            // Manejar eventos de carga
            video.addEventListener('loadeddata', () => {
                console.log('Video cargado correctamente');
            });

            video.addEventListener('canplay', () => {
                console.log('Video listo para reproducir');
            });
        });
    });
</script> 